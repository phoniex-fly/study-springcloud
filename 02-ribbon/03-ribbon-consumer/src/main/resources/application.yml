server:
  port: 9993
spring:
  application:
    name: consumer
eureka:
  client:
    service-url:
      defaultZone: http://peer1:8761/eureka
ribbon:
  ReadTimeout: 1000 #默认超时时间
  ConnectionTimeout: 1000 #连接时长

#负载均衡算法
#  BestAvailableRule：在过滤掉故障服务后，它会基于过去30分钟的统计结果选取当前并发量最小的服务节点，也就是最“闲”的节点作为目标地址。如果统计结果尚未生成，则采用轮询的方式选定节点
#  ZoneAvoidanceRule：?包含了组合过滤条件，分别是Zone级别和可用性级别，Zone级别过滤为在Eureka注册中一个服务节点有Zone, Region和URL三个身份信息，其中Zone可以理解为机房大区（未指定则由Eureka给定默认值），而这里会对这个Zone的健康情况过滤其下面所有服务节点。可用性级别过滤和AvailabilityFilteringRule的验证非常像，会过滤掉当前并发量较大，或者处于熔断状态的服务节点
#  AvailabilityFilteringRule：这个规则底层依赖RandomRobinRule来选取节点，但并非来者不拒，必须要满足它的最低要求的节点才会被选中（节点处于非熔断状态和当前活跃请求数量不能超过阈值）。如果节点满足了要求，无论其响应时间或者当前并发量是什么，都会被选中
#  WeightedResponseTimeRule：这个4Rule继承自RoundRibbonRule，他会根据服务节点的响应时间计算权重，响应时间越长权重就越低，响应越快则权重越高，权重的高低决定了机器被选中概率的高低。也就是说，响应时间越小的机器，被选中的概率越大??
#  ResponseTimeWeightedRule：作用同 WeightedResponseTimeRule，ResponseTime-Weighted Rule 后来改名为 WeightedResponseTimeRule
#  RoundRobinRule：轮询选择，轮询 index，选择 index 对应位置的 Server
#  RandomRule：随机选择一个 Server
#  RetryRule：对选定的负载均衡策略机上重试机制，也就是说当选定了某个策略进行请求负载时在一个配置时间段内若选择 Server 不成功，则一直尝试使用 subRule 的方式选择一个可用的 Server


